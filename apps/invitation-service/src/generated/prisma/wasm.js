
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.2
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.2",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.InvitationScalarFieldEnum = {
  id: 'id',
  token: 'token',
  email: 'email',
  targetType: 'targetType',
  targetId: 'targetId',
  status: 'status',
  expiresAt: 'expiresAt',
  invitedByUserId: 'invitedByUserId',
  invitedUserId: 'invitedUserId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InvitationRoleScalarFieldEnum = {
  invitationId: 'invitationId',
  roleId: 'roleId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.InvitationStatus = exports.$Enums.InvitationStatus = {
  PENDING: 'PENDING',
  EXPIRED: 'EXPIRED',
  REJECTED: 'REJECTED',
  ACCEPTED: 'ACCEPTED'
};

exports.InvitationTargetType = exports.$Enums.InvitationTargetType = {
  EVENT: 'EVENT'
};

exports.Prisma.ModelName = {
  Invitation: 'Invitation',
  InvitationRole: 'InvitationRole'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "/home/jdavid/Documents/proyects/PCPI/apps/invitation-service/src/generated/prisma",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "rhel-openssl-3.0.x",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "/home/jdavid/Documents/proyects/PCPI/apps/invitation-service/prisma/schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": null
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.16.2",
  "engineVersion": "1c57fdcd7e44b29b9313256c76699e91c3ac3c43",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "generator client {\n  provider = \"prisma-client-js\"\n  output   = \"../src/generated/prisma\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nenum InvitationStatus {\n  PENDING\n  EXPIRED\n  REJECTED\n  ACCEPTED\n}\n\nenum InvitationTargetType {\n  EVENT\n}\n\nmodel Invitation {\n  id              String               @id @default(uuid())\n  token           String               @unique @db.Text\n  email           String               @db.VarChar(255)\n  targetType      InvitationTargetType @map(\"target_type\")\n  targetId        Int                  @map(\"target_id\")\n  status          InvitationStatus\n  expiresAt       Int                  @map(\"expires_at\")\n  invitedByUserId Int                  @map(\"invited_by_user_id\")\n  invitedUserId   Int?                 @map(\"invited_user_id\")\n  createdAt       DateTime             @default(now()) @map(\"created_at\") @db.Timestamp()\n  updatedAt       DateTime             @updatedAt @map(\"updated_at\") @db.Timestamp()\n\n  roles InvitationRole[] @relation(\"invitation_roles\")\n\n  @@map(\"invitations\")\n}\n\nmodel InvitationRole {\n  invitationId String @map(\"invitation_id\")\n  roleId       Int    @map(\"role_id\")\n\n  invitation Invitation @relation(\"invitation_roles\", fields: [invitationId], references: [id])\n\n  @@id([invitationId, roleId])\n}\n",
  "inlineSchemaHash": "df8eb1c283b1803103a5bd66266cb496ca4671d6ae9875d5e051549909d72c1c",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"Invitation\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"token\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"targetType\",\"kind\":\"enum\",\"type\":\"InvitationTargetType\",\"dbName\":\"target_type\"},{\"name\":\"targetId\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"target_id\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"InvitationStatus\"},{\"name\":\"expiresAt\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"expires_at\"},{\"name\":\"invitedByUserId\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"invited_by_user_id\"},{\"name\":\"invitedUserId\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"invited_user_id\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"created_at\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\",\"dbName\":\"updated_at\"},{\"name\":\"roles\",\"kind\":\"object\",\"type\":\"InvitationRole\",\"relationName\":\"invitation_roles\"}],\"dbName\":\"invitations\"},\"InvitationRole\":{\"fields\":[{\"name\":\"invitationId\",\"kind\":\"scalar\",\"type\":\"String\",\"dbName\":\"invitation_id\"},{\"name\":\"roleId\",\"kind\":\"scalar\",\"type\":\"Int\",\"dbName\":\"role_id\"},{\"name\":\"invitation\",\"kind\":\"object\",\"type\":\"Invitation\",\"relationName\":\"invitation_roles\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

